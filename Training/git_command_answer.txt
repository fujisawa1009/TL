# 基本操作
# 1. Gitのバージョンを確認するコマンド
git --version

# 2. 新しいGitリポジトリを作成するコマンド
git init

# 3. 既存のリポジトリをクローンするコマンド
git clone <リポジトリURL>

# 4. ファイルをステージングエリアに追加するコマンド
git add ファイル名

# 5. ステージングエリアのファイルをコミットするコマンド
git commit -m "コミットメッセージ"

# リモートリポジトリ操作
# 6. リモートリポジトリを追加するコマンド
git remote add origin <リモートURL>

# 7. リモートリポジトリのURLを表示するコマンド
git remote -v

# 8. リモートリポジトリから変更をプルするコマンド
git pull origin main

# 9. ローカルの変更をリモートにプッシュするコマンド
git push origin main

# 10. リモートリポジトリのURLを変更するコマンド
git remote set-url origin <新しいリモートURL>

# ブランチ操作
# 11. 現在のブランチを確認するコマンド
git branch

# 12. 新しいブランチを作成するコマンド
git branch 新しいブランチ名

# 13. ブランチを切り替えるコマンド
git checkout ブランチ名

# 14. ブランチを削除するコマンド
git branch -d 削除するブランチ名

# 15. ブランチをリモートリポジトリにプッシュするコマンド
git push origin 新しいブランチ名

# マージと競合解決
# 16. ブランチをマージするコマンド
git merge マージするブランチ名

# 17. マージ時に競合が発生した場合の競合解決手順
# 手動で競合を解決後、以下を実行：
git add 解決したファイル名
git commit

# 18. マージが成功したか確認する方法
git log --graph --oneline

# ログと履歴
# 19. コミット履歴を確認するコマンド
git log

# 20. コミット履歴を1行で表示するコマンド
git log --oneline

# 21. 特定のファイルの変更履歴を確認するコマンド
git log -p ファイル名

# 22. 過去のコミットを参照するコマンド
git checkout <コミットハッシュ>

# 23. コミット履歴のグラフを表示するコマンド
git log --graph --oneline

# コミットの修正と変更
# 24. 最新のコミットメッセージを修正するコマンド
git commit --amend -m "新しいコミットメッセージ"

# 25. 最新のコミットに変更を追加するコマンド
git add 変更したファイル名
git commit --amend --no-edit

# 26. 過去のコミットを編集する手順
git rebase -i <対象のコミットハッシュ>

# 27. 特定のコミットを取り消すコマンド
git revert <コミットハッシュ>

# 28. 最新のコミットをリセットするコマンド
git reset --soft HEAD~1

# ファイル操作
# 29. Gitの管理対象外のファイルを確認するコマンド
git status

# 30. 特定のファイルをリポジトリから削除するコマンド
git rm ファイル名

# 31. ステージングエリアからファイルを除外するコマンド
git reset HEAD ファイル名

# 32. `.gitignore` ファイルを作成し、特定のファイルを無視する手順
echo "無視するファイル名" >> .gitignore
git add .gitignore
git commit -m "Add .gitignore"

# 33. ファイルを元の状態に戻すコマンド
git checkout -- ファイル名

# タグ操作
# 34. 新しいタグを作成するコマンド
git tag タグ名

# 35. タグを削除するコマンド
git tag -d タグ名

# 36. リモートリポジトリにタグをプッシュするコマンド
git push origin タグ名

# 37. タグ一覧を表示するコマンド
git tag

# 38. タグを使って特定のコミットに戻るコマンド
git checkout タグ名

# スタッシュ
# 39. 作業内容をスタッシュするコマンド
git stash

# 40. スタッシュを適用するコマンド
git stash apply

# 41. スタッシュを削除するコマンド
git stash drop

# 42. スタッシュ一覧を表示するコマンド
git stash list

# リベースとチェリーピック
# 43. リベースを開始するコマンド
git rebase ブランチ名

# 44. リベース中に競合が発生した場合の解決手順
# 手動で競合を解決後、以下を実行：
git rebase --continue

# 45. 特定のコミットを別のブランチに適用するコマンド
git cherry-pick <コミットハッシュ>

# 応用操作
# 46. リモートリポジトリを削除するコマンド
git remote remove origin

# 47. 特定のリモートブランチを削除するコマンド
git push origin --delete ブランチ名

# 48. Gitでクリーンアップを実行して不要なデータを削除するコマンド
git gc

# 49. Gitフックを設定する方法
# .git/hooks/pre-commit ファイルを作成してスクリプトを記述

# 50. サブモジュールを追加し、更新する手順
git submodule add <サブモジュールURL>
git submodule update --init --recursive
